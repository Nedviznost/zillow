// eslint-disable-next-line jsx-a11y/label-has-for
import React, { useEffect, useState, ReactElement } from 'react'
import {
  useInsertHomeMutation,
  useUpdateHomeMutation,
} from 'src/generated/graphql'
import Router, { useRouter } from 'next/router'
import { Controller, FieldError, useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import HtmlSelect from 'src/components/atoms/HtmlSelect'
import Input from 'src/components/atoms/HtmlInput'
import Label from 'src/components/atoms/HtmlLabel'
import TextArea from 'src/components/atoms/HtmlTextArea'
import BadgeCheckIcon from '@heroicons/react/outline/BadgeCheckIcon'
import { loadStripe } from '@stripe/stripe-js'
import axios from 'axios'
import { Children } from 'src/types'
import Link from 'src/components/atoms/Link'
import Dialog from 'src/components/molecules/Dialog'
import { RadioGroup, Switch } from '@headlessui/react'
import { getHomeTypes } from 'src/store/static'
import { useAppDispatch, useAppSelector } from 'src/store'
import Button from 'src/components/atoms/Button'
import { resetMap } from 'src/store/map/mapSlice'
import { CircularProgressWithLabel } from 'src/components/molecules/Progress/CircularStatic'
import { SimpleScroller } from 'src/components/molecules/Draggable/Dragable'
import { useMyHomeEdit, useRedirectUnAuthenticatedUsers } from 'src/hooks'
import { MapLocationPicker, newHomeSchema, NewHomeSchema } from './utils' 

export interface IAddNewHomeTemplateProps { }

export const FormSection = ({
  title,
  children,
}: {
  title: string | ReactElement
  children: Children
}) => (
  <div className='grid gap-8 pb-6 sm:grid-cols-2 md:grid-cols-3'>
    <div className='col-span-1'>{title}</div>
    <div className='grid col-span-2 gap-4 sm:grid-cols-2'>{children}</div>
  </div>
)

export const FormSectionTitle = ({
  title,
  description,
}: {
  title: string
  description: string
}) => (
  <div className='space-y-4'>
    <div className='text-xl font-semibold'>{title}</div>
    <div className='text-sm text-gray-600'>{description}</div>
  </div>
)

export const defaultValuesData = {
  title: undefined,
  address: '',
  bath: 0,
  beds: 0,
  city: '',
  description: '',
  features: '',
  published: true,
  price: undefined,
  sqft: undefined,
  plan: 0,
  state: '',
  style: 'Lot_Land',
  yearBuilt: 2002,
  zipcode: '',
  lat: undefined,
  lng: undefined,
  imgs: undefined,
  status: "se_prodava"
}

const AddNewHomeTemplate = (editHome?: any) => {
  useRedirectUnAuthenticatedUsers()


  const editData = editHome.editHome
  const router = useRouter()
  const isEditPage = router.pathname.includes('izmeni')
  const homeId = Number(router.query.id)
  const [isUploading, setIsUploading] = useState(false)
  const [publishedHome, addNewHome] = useInsertHomeMutation()
  const [updatedHome, updateHome] = useUpdateHomeMutation()

  useMyHomeEdit(homeId, isEditPage)

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    control,
    setError,
    clearErrors,
    formState: { errors },
  } = useForm<NewHomeSchema>({
    resolver: yupResolver(newHomeSchema),
    defaultValues: defaultValuesData,
  })

  const formData = watch()

  function setEditData() {

    if (editData && isEditPage) {
      const {
        title,
        address,
        bath,
        beds,
        city,
        description,
        features,
        published,
        price,
        sqft,
        plan,
        state,
        style,
        yearBuilt,
        zipcode,
        lat,
        lng,
        imgs,
        status
      } = editData

      setValue('title', title)
      setValue('address', address)
      setValue('bath', bath)
      setValue('beds', beds)
      setValue('city', city)
      setValue('state', state)
      setValue('description', description)
      setValue('features', features)
      setValue('published', published)
      setValue('price', price)
      setValue('sqft', sqft)
      setValue('plan', plan)
      setValue('style', style)
      setValue('yearBuilt', yearBuilt)
      setValue('zipcode', zipcode)
      setValue('lat', lat)
      setValue('lng', lng)
      setValue('imgs', imgs)
      setValue('status', status)
    }
  }


  useEffect(() => {
    if (editData && isEditPage) {
      setEditData()
    }
  }, [editData])


  const uid = useAppSelector((state) => state.user.data.user?.uid)
  const [publishing, setPublishing] = useState(false)
  const [showDialog, setshowDialog] = useState(false)
  const [showErrorDialog, setShowErrorDialog] = useState(false)
  const [showEditDialog, setShowEditDialog] = useState(false)
  const onSubmit = handleSubmit(async (data: any) => {
    const { plan } = formData

    setPublishing(true)

    const updatedFormData = {
      id: homeId,
      ...formData
    }

    console.log(updatedFormData)
    console.log("updatedFormData")

    if (isEditPage) {
      await updateHome(updatedFormData).then(() => {
        setShowEditDialog(true)
      })
    }
    else if (!isEditPage) {
      const { ...uploadData } = data
      console.log(uploadData)
      const home = await addNewHome({ object: { ...uploadData, uid } })
      if (home.data?.insert_homes_one?.id && plan && plan > 0 && !isEditPage) {
        const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
        const stripePromise = loadStripe(publishableKey || '')
        const stripe = await stripePromise
        const checkoutSession = await axios.post('/api/create-stripe-session', {
          id: home.data?.insert_homes_one?.id,
          plan,
          imgs: uploadData.imgs,
          address: uploadData.address,
        })
        const result = await stripe?.redirectToCheckout({
          sessionId: checkoutSession.data.id,
        })
      } else {
        if (home.error && !isEditPage) setShowErrorDialog(true)
        if (home.data?.insert_homes_one?.created_at && !isEditPage) setshowDialog(true)
      }
    }
    setPublishing(false)
  })

  const dispatch = useAppDispatch()

  useEffect(() => {
    dispatch(resetMap())
  }, [dispatch])

  const [circuleProgress, setCirculeProgress] = useState(0)
  const isLand = formData.style.includes('Lot_Land')


  const handleImageUpload = async (e) => {
    const images = e.target.files;

    if (images && images.length > 20) {
      setError('imgs', {
        message: '–ù–µ–º–æ–∂–µ –¥–∞ —Å–µ –≤–Ω–µ—Å–∞—Ç –ø–æ–≤–µ—ú–µ –æ–¥ 20 —Å–ª–∏–∫–∏. –í–µ –º–æ–ª–∏–º–µ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞—ò—Ç–µ –≥–∏.',
      });
      return;
    }

    if (images && images.length > 0) {
      clearErrors('imgs');
      setIsUploading(true);
      const list = [];

      try {
        for (const file of images) {
          const formData = new FormData();
          formData.append('files[]', file);

          const response = await axios.put(
            'https://next.nedviznost.mk/remote.php/dav/files/nextcloud/' + file.name,
            formData,
            {
              headers: {
                'Authorization': 'Basic ' + btoa('nextcloud:damjan123'),
                'Content-Type': 'application/octet-stream',
              },
            }
          );

          if (response.status === 201) {
            console.log(response.data); // Log the response data
            console.log(response); // Log the response data
            const obj = {} as any;
            obj.sorting = 0;
            obj.url = response.headers['oc-fileid']; // Use the OC-FileId header
            list.push(obj);
            console.log(obj);
          } else {
            throw new Error('Failed to upload image');
          }
        }

        const sortingList = list.map((item, i) => ({ url: item.url, sorting: i }));
        setValue('imgs', sortingList);
        setIsUploading(false);
      } catch (error) {
        setIsUploading(false);
        setError('imgs', {
          message: error.message,
        });
      }
    }
  };


  const [imageSrc, setImageSrc] = useState<string | null>(null);

  useEffect(() => {
    const fetchImage = async () => {
      const config = {
        auth: {
          username: 'nextcloud',
          password: 'damjan123',
        },
        responseType: 'blob', // Get image as a binary blob
      } as any;

      try {
        const response = await axios.get('https://next.nedviznost.mk/remote.php/dav/files/nextcloud/138728.jpg', config); // Replace with your backend image endpoint
        setImageSrc(URL.createObjectURL(response.data));
      } catch (error) {
        console.error(error);
      }
    };

    fetchImage();
  }, []);


  return (
    <form onSubmit={onSubmit} className='mb-24 space-y-20'>
      {/* <img src="" /> */}
      {imageSrc ? (
        <img src={imageSrc} alt="Fetched from Nextcloud" />
      ) : (
        <p>Loading image...</p>
      )}
      <div className='mt-12 text-3xl font-medium'>–î–æ–¥–∞—ò –Ω–æ–≤ –¥–æ–º</div>
      <Dialog
        open={showEditDialog}
        setOpen={setShowEditDialog}
        className='max-w-md'
      >
        <div className='text-xl font-semibold'>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ—Ç –æ–≥–ª–∞—Å</div>
        <p className='mt-4 text-sm text-gray-600'>
          –í–∞—à–∏–æ—Ç –æ–≥–ª–∞—Å –µ –∏–∑–º–µ–Ω–µ—Ç —Å–æ –±—Ä–æ—ò –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞ {homeId}
        </p>
        <Link
          className='inline-block px-4 py-2 mt-8 text-center text-white bg-primary-600'
          href={`/dom/${homeId}`}
        >
          –ü–æ–≥–ª–µ–¥–Ω–∏ –≥–æ –∏–º–æ—Ç–æ—Ç
        </Link>
      </Dialog>

      <Dialog
        open={showErrorDialog}
        setOpen={setShowErrorDialog}
        className='max-w-md'
      >
        <div className='text-xl font-semibold'>–£–ø—Å. –î–æ—ò–¥–µ –¥–æ –≥—Ä–µ—à–∫–∞</div>
        <p className='mt-4 text-sm text-gray-600'>–î–æ—ò–¥–µ –¥–æ –≥—Ä–µ—à–∫–∞</p>
      </Dialog>
      <Dialog open={showDialog} setOpen={setshowDialog} className='max-w-md'>
        <div className='text-xl font-semibold'>
          üéä –í–∞—à–∏–æ—Ç –Ω–æ–≤ –¥–æ–º –µ –æ–±—ò–∞–≤–µ–Ω! üéä
        </div>
        <p className='mt-4 text-sm text-gray-600'>
          –ß–µ—Å—Ç–∏—Ç–∫–∏ –í–∞—à–∏–æ—Ç –Ω–æ–≤ –¥–æ–º –µ –æ–±—ò–∞–≤–µ–Ω.
        </p>
        <p>
          –ë—Ä–æ—ò –∑–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞: {publishedHome.data?.insert_homes_one?.id}
        </p>
        <div className='flex justify-end space-x-4'>
          <button
            type='button'
            onClick={() => Router.reload()}
            className='inline-block px-4 py-2 mt-8 text-center border text-primary-600 border-primary-600'
          >
            + –î–æ–¥–∞—ò –Ω–æ–≤ –¥–æ–º
          </button>
          <Link
            className='inline-block px-4 py-2 mt-8 text-center text-white bg-primary-600'
            href={`/dom/${publishedHome.data?.insert_homes_one?.id}`}
          >
            –ü–æ–≥–ª–µ–¥–Ω–∏ –≥–æ –∏–º–æ—Ç–æ—Ç
          </Link>
        </div>
      </Dialog>

      <FormSection
        title={<FormSectionTitle title='–û—Å–Ω–æ–≤–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' description='' />}
      >
        <Label title='–°—Ç–∞—Ç—É—Å' error={errors.status}>
          <HtmlSelect {...register('status')}>
            <option value='se_prodava'>–°–µ –ø—Ä–æ–¥–∞–≤–∞</option>
            <option value='se_izdava'>–°–µ –∏–∑–¥–∞–≤–∞</option>
            <option value='prodadeno'>–ü–†–û–î–ê–î–ï–ù–û</option>
          </HtmlSelect>
        </Label>
        <Label title='–¶–µ–Ω–∞ ‚Ç¨(EUR)' error={errors.price}>
          <Input
            type='number'
            placeholder='–í–Ω–µ—Å–∏ —ò–∞ —Ü–µ–Ω–∞—Ç–∞ –≤–æ ‚Ç¨(EUR). '
            {...register('price')}
          />
        </Label>

        <Label title='–°—Ç–∏–ª' error={errors.style}>
          <HtmlSelect {...register('style')}>
            <option value='Select type of house' disabled>
              –ò–∑–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞ –∏–º–æ—Ç
            </option>
            <option value='Lot_Land'>–ò–º–æ—Ç</option>
            <option value='Condo'>–°—Ç–∞–Ω</option>
            <option value='Single_Family_Home'>–ö—É—ú–∞</option>
            <option value='Townhouse'>–í–∏–∫–µ–Ω–¥–∏—Ü–∞</option>
            <option value='Unknown'>–ù–µ–ø–æ–∑–Ω–∞—Ç–æ </option>
            {/* <option value='Mobile_Manufactured'>–ú–æ–±–∏–ª–Ω–∞ –≥—Ä–∞–¥–±–∞</option> */}

          </HtmlSelect>
        </Label>

        <Label
          title={!isLand ? '–ì–æ–¥–∏–Ω–∞ –Ω–∞ –≥—Ä–∞–¥–±–∞' : ''}
          error={errors.yearBuilt}
        >
          {!isLand && (
            <Input
              type='number'
              placeholder='–í–Ω–µ—Å–∏ –≥–æ–¥–∏–Ω–∞ –Ω–∞ –≥—Ä–∞–¥–±–∞.'
              {...register('yearBuilt')}
            />
          )}
        </Label>
      </FormSection>
      <FormSection
        title={<FormSectionTitle title='–ü–æ–≤—Ä—à–∏–Ω–∞ –Ω–∞ –∏–º–æ—Ç' description='' />}
      >
        <Label title={!isLand ? '–ëa—ö–∏' : ''} error={errors.bath}>
          {!isLand && (
            <Input
              type='number'
              placeholder='–í–Ω–µ—Å–∏ –±—Ä–æ—ò –Ω–∞ –ëa—ö–∏.'
              {...register('bath')}
            />
          )}
        </Label>

        <Label title={!isLand ? '–°–æ–±–∏' : ''} error={errors.beds}>
          {!isLand && (
            <Input
              type='number'
              placeholder='–í–Ω–µ—Å–∏ –±—Ä–æ—ò –Ω–∞ –°–æ–±–∏.'
              {...register('beds')}
            />
          )}
        </Label>
        <Label title='–ü–æ–≤—Ä—à–∏–Ω–∞ –≤–æ –º–µ—Ç—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏' error={errors.sqft}>
          <Input type='number' placeholder='–ü–æ–≤—Ä—à–∏–Ω–∞.' {...register('sqft')} />
        </Label>
        <Label title='–¶–µ–Ω–∞ –æ–¥ –º–µ—Ç–∞—Ä –∫–≤–∞–¥—Ä–∞—Ç–µ–Ω (–ê–≤—Ç–æ–º–∞—Ç—Å–∫–∏)' error={errors.sqft}>
          <Input
            readOnly
            placeholder='–¶–µ–Ω–∞ –æ–¥ –º–µ—Ç–∞—Ä –∫–≤–∞–¥—Ä–∞—Ç–µ–Ω.'
            value={
              !!formData.price &&
                formData.sqft &&
                formData.price > 0 &&
                formData.sqft > 0
                ? `${((formData.price || 0) / (formData.sqft || 0)).toFixed(
                  1
                )} ‚Ç¨/„é°`
                : ''
            }
          />
        </Label>
      </FormSection>
      <FormSection
        title={
          <FormSectionTitle
            title='–õ–æ–∫–∞—Ü–∏—ò–∞'
            description='–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ –ª–æ–∫–∞—Ü–∏—ò–∞ –∏ –ø–æ—Å—Ç–∞–≤–∏ —ò–∞ –Ω–∞–¥ –≤–∞—à–∏–æ—Ç –∏–º–æ—Ç'
          />
        }
      >
        <MapLocationPicker setValue={setValue} editHome={editHome} className='sm:col-span-2' />

        <Label title='–ê–¥—Ä–µ—Å–∞' error={errors.address}>
          <TextArea
            placeholder='–í–Ω–µ—Å–∏ –∞–¥—Ä–µ—Å–∞.'
            {...register('address')}
            rows={4}
          />
        </Label>
        <Label title='–ì—Ä–∞–¥' error={errors.city}>
          <Input
            type='string'
            placeholder='–í–Ω–µ—Å–∏ –≥—Ä–∞–¥.'
            {...register('city')}
          />
        </Label>
        <Label title='–û–ø—à—Ç–∏–Ω–∞' error={errors.state}>
          <Input placeholder='–í–Ω–µ—Å–∏ –æ–ø—à—Ç–∏–Ω–∞.' {...register('state')} />
        </Label>
        <Label title='–ó–∏–ø –∫–æ–¥' error={errors.zipcode}>
          <Input placeholder='–í–Ω–µ—Å–∏ –∑–∏–ø –∫–æ–¥' {...register('zipcode')} />
        </Label>
      </FormSection>

      <FormSection title={<FormSectionTitle title='–ú–µ–¥–∏–∞' description='' />}>
        <Label
          title='–°–ª–∏–∫–∏'
          className='col-span-2'
          error={errors.imgs && (errors.imgs as unknown as FieldError)}
        >
          <Input
            type='file'
            placeholder='–í–Ω–µ—Å–∏ —Å–ª–∏–∫–∏'
            accept='image/*'
            multiple
            disabled={formData && formData.imgs && formData.imgs.length > 7}
            onChange={handleImageUpload}
          />
          {isUploading && <CircularProgressWithLabel value={circuleProgress} />}
          {isUploading && <div className='mt-2'>–°–µ –≤–Ω–µ—Å—É–≤–∞...</div>}
          {formData && formData.imgs && formData.imgs.length > 0 && (
            <div className='flex items-center gap-1 py-2 mt-2'>
              <BadgeCheckIcon className='w-4 h-4 text-green' />
              {formData.imgs?.length}{' '}
              {formData.imgs?.length === 1 ? '—Å–ª–∏–∫–∞ –≤–Ω–µ—Å–µ–Ω–∞' : '—Å–ª–∏–∫–∏ –≤–Ω–µ—Å–µ–Ω–∏'}
            </div>
          )}
        </Label>

        {(formData && formData.imgs) ? (
          <SimpleScroller imgs={formData.imgs} setValue={setValue} />
        ) : (
          <> </>
        )}
      </FormSection>


      <FormSection
        title={<FormSectionTitle title='–î–æ–¥–∞—Ç–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' description='' />}
      >
        <Label title='–ù–∞—Å–ª–æ–≤' error={errors.description}>
          <TextArea
            placeholder='–ù–∞—Å–ª–æ–≤ –Ω–∞ –æ–≥–ª–∞—Å–æ—Ç.'
            rows={4}
            {...register('title')}
          />
        </Label>
        <Label title='–û–ø–∏—Å' error={errors.description}>
          <TextArea
            placeholder='–û–ø–∏—à–∏ –≥–æ –¥–æ–º–æ—Ç.'
            rows={4}
            {...register('description')}
          />
        </Label>
        <Label title='–î–æ–¥–∞—Ç–æ—Ü–∏' error={errors.features}>
          <TextArea
            placeholder='–ö–ª–∏–º–∞ | –ü–∞—Ä–∫–∏–Ω–≥ | 3 —Å–ø—Ä–∞—Ç–∞'
            rows={4}
            {...register('features')}
          />
        </Label>
      </FormSection>
      <FormSection
        title={
          <FormSectionTitle
            title='–ü–ª–∞–Ω'
            description='–í–Ω–µ—Å–∏ –≥–æ –æ–≥–ª–∞—Å–æ—Ç –≤–æ –Ω–∞—ò–≥–æ—Ä–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –ø–æ–±—Ä–∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞! –¶–µ–Ω–∏—Ç–µ —Å–µ –≤–æ –¥–µ–Ω–∞—Ä–∏ –º–µ—Å–µ—á–Ω–æ. –ù–∏–∫–∞–∫–≤–∏ –∫—Ä–µ–¥–∏—Ç–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –Ω–µ–º–∞ –¥–∞ –≤–∏ –±–∏–¥–Ω–∞—Ç –ø–æ–±–∞—Ä–∞–Ω–∏'
          />
        }
      >
        <Controller
          name='plan'
          control={control}
          render={({ field: { onChange, value } }) => (
            <RadioGroup
              value={value?.toString()}
              onChange={(v: any) => onChange(+(v || 0))}
              className='col-span-2 space-y-2'
            >
              <div className='grid w-full grid-cols-2 gap-3 my-2 lg:grid-cols-4'>
                {[0, 1].map((item) => (
                  <RadioGroup.Option
                    key={item}
                    value={`${item}`}
                    className='cursor-pointer'
                    disabled={getHomeTypes(item).price === 2400}
                  >
                    {({ checked }) => (
                      <div
                        className={` ${getHomeTypes(item).price === 2400 && "bg-gray-100 text-gray-500"} p-6 transition-all relative  rounded-lg shadow-lg  ${checked
                          ? ' border-white border bg-luxury   shadow-primary/50 text-white'
                          : 'border border-primary-100 shadow-black/20 '
                          }`}
                      >
                        {getHomeTypes(item).tag && (
                          <div className='absolute bottom-1 pt-2 text-xs font-light tracking-wider'>
                            {getHomeTypes(item).tag}
                          </div>
                        )}
                        <div className='font-semibold '>
                          {getHomeTypes(item).displayName}
                        </div>
                        <div className={(getHomeTypes(item).discountPrice === 0 && getHomeTypes(item).price !== 0) ? "text-xl line-through" : 'text-xl'}>
                          {getHomeTypes(item).price
                            ? `${getHomeTypes(item).price} –ú–ö–î`
                            : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                        </div>
                        <div className='text-2xl'>
                          {(getHomeTypes(item).discountPrice === 0) ?
                            `${getHomeTypes(item).discountPrice} –ú–ö–î` : ""}
                        </div>
                      </div>
                    )}
                  </RadioGroup.Option>
                ))}
              </div>
            </RadioGroup>
          )}
        />
      </FormSection>
      <FormSection
        title={
          <FormSectionTitle
            title='–à–∞–≤–Ω–æ'
            description='–í–∞—à–∏–æ—Ç –æ–≥–ª–∞—Å —ú–µ –º–æ–∂–µ –≤–µ–¥–Ω–∞—à –¥–∞ –±–∏–¥–Ω–µ –≤–∏–¥–µ–Ω.'
          />
        }
      >
        <Controller
          name='published'
          control={control}
          render={({ field: { onChange, value } }) => (
            <Switch
              checked={value || false}
              onChange={onChange}
              className={`${value ? 'bg-luxury' : 'bg-gray-200'
                } relative inline-flex items-center h-8 shadow-inner rounded-full w-16`}
            >
              <span
                className={`${value ? 'translate-x-9' : 'translate-x-1'
                  } inline-block w-6 h-6 transform bg-white rounded-full transition-transform`}
              />
            </Switch>
          )}
        />
      </FormSection>

      <div className='flex justify-end'>
        <Button
          isLoading={publishing}
          className='w-full px-20 py-2 text-white border rounded sm:w-1/2 md:w-1/3 lg:w-1/4 border-primary bg-primary-500'
          type='submit'
        >
          {isEditPage ? '–ò–∑–º–µ–Ω–∏' : '–û–±—ò–∞–≤–∏'}
        </Button>
      </div>
    </form >
  )
}

export default AddNewHomeTemplate
